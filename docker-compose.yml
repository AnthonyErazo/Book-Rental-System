version: '3.9'

services:
  frontend:
    build:
      context: ./FrontBookRentals
      dockerfile: Dockerfile
    ports:
      - "4200:4200"
    environment:
      - DOCKER=true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    networks:
      - book-rentals-network
    depends_on:
      - api

  api:
    build:
      context: ./BackBookRentals
      dockerfile: src/BackBookRentals.Api/Dockerfile
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
    container_name: backbookrentalsapi
    volumes:
      - appdata:/app
    depends_on:
      sqlserver:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - book-rentals-network

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: "P@ssw0rd123"
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Developer"
      MSSQL_AGENT_ENABLED: "true"
    volumes:
      - sqldata:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "if [ -f /opt/mssql-tools18/bin/sqlcmd ]; then /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P P@ssw0rd123 -Q 'SELECT 1' -C; elif [ -f /opt/mssql-tools/bin/sqlcmd ]; then /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P P@ssw0rd123 -Q 'SELECT 1'; else exit 1; fi"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - book-rentals-network

  adminer:
    image: adminer:latest
    container_name: adminer
    ports:
      - "8081:8080"
    depends_on:
      - sqlserver
    networks:
      - book-rentals-network

networks:
  book-rentals-network:
    driver: bridge

volumes:
  appdata:
    driver: local
  sqldata:
    driver: local 